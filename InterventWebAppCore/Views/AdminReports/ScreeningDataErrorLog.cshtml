<!--ADMIN VIEW-->
@using InterventWebApp
@model InterventWebApp.ReportSelectModel
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<section class="main search-participants admin-main-body">
    <div class="control-bar">
        <div class="grid-container">
            <div class="grid-x grid-margin-x scheduler-offset-small-only">
                <div class="small-12 large-6 left cell">
                    @Html.Partial("_ReportSelect", Model, new ViewDataDictionary(ViewData) { { "Kind", "ScreeningDataErrorLog" } })
                </div>
            </div>
        </div>
    </div>
    <div class="grid-container">
        <div class="panel filters">
            <fieldset>
                <legend>Report Criteria</legend>
                <div class="grid-x grid-padding-x">
                    <div class="small-12 medium-6 cell">
                        <input id="StartDate" type="text" placeholder="Start Date..." />
                        <input id="HStartDate" type="hidden" />
                    </div>
                    <div class="small-12 medium-6 cell">
                        <input id="EndDate" type="text" placeholder="End Date..." />
                        <input id="HEndDate" type="hidden" />
                    </div>
                    <div class="small-12 medium-6 cell">
                        @Html.DropDownListFor(x => x.Organization, Model.OrganizationList, "--Select Organization--", new Dictionary<string, object> { { "class", "primary-select" } })
                    </div>
                    <div class="small-12 medium-6 cell text-right">
                        <button class="button" id="filter-screening-data">
                            <div class="loading-spinner hide" show-if-submitting></div>
                            <i class="fa fa-filter"></i>
                            Search
                        </button>
                        <button class="secondary-color small" id="download-log-data">
                            <div class="loading-spinner hide" id="download-spinner"></div>
                            <i class="fa fa-download"></i>
                            Download
                        </button>
                    </div>
                </div>
            </fieldset>
        </div>
        <div class="small-12 cell" id="report">
			<div class="table-container">
				<table class='table basic-table1' id="screeningdata-error-report"></table>
			</div>
        </div>
        <div class="cell small-12">
            <!-- pagination Start -->
            <div class="pagination-area hide" id="pagination-centered">
                <ul>
                    <li id="numeric"></li>
                </ul>
                <!-- page-link Start -->
                <div class="page-link">
                    <label>@Translate.Message("L4041")</label>
                    <div class="grid-x">
                        <input type="text" id="jumptoPageNo">
                        <button type="submit" id="gotoPage_submit" class="button">@Translate.Message("L4042")</button>
                    </div>
                </div>
                <!-- page-link End -->
            </div>
            <!-- pagination End -->
        </div>
    </div>
</section>
<script src="@Url.Content("../Scripts/NewPager.js")?v=@CommonUtility.GetRandom()"></script>
<script src="@Url.Content("../Scripts/downloadcsv.js")?v=@CommonUtility.GetRandom()"></script>
<script>
    var startIndex = 1;
    var pageSize = 15;
    var totalRecords = 0;
    var currentPage = 0;
    var totalPages = 0;
    var download = false;
    $("#StartDate").on("change", function () {
        $('#HStartDate').val(toSystemDateFormat($('#StartDate').val()));
    });
    $("#EndDate").on("change", function () {
        $('#HEndDate').val(toSystemDateFormat($('#EndDate').val()));
    });
        $(document).ready(function () {
            $("#StartDate").fdatepicker({
                format: "@Model.DateFormat.ToLower()",
                endDate: new Date()
            }).on('change', function (selected) {
                var endDate = new Date($("#HEndDate").val());
                var minDate = new Date($("#HStartDate").val());
                if (endDate < minDate) {
                    $('#EndDate').fdatepicker('setDate', minDate);
                }
                $('#EndDate').fdatepicker('setStartDate', minDate);
                $("#EndDate").trigger("change");
            });
            $("#EndDate").fdatepicker({
                format: "@Model.DateFormat.ToLower()",
                endDate: new Date()
            });
        });
        $('#filter-screening-data').on('click', function () {
            $('[show-if-submitting]').parent().prop('disabled', 'disabled');
            $('[show-if-submitting]').removeClass('hide');
            startIndex = 0;
            pageSize = 10;
            totalRecords = 0;
            currentPage = 0;
            totalPages = 0;
            download =false;
            ListscreeningdataErrorReport();
        });

    $('#download-log-data').on('click', function () {
        $('#download-spinner').parent().prop('disabled', 'disabled');
        $('#download-spinner').removeClass('hide');
        download = true;
        ListscreeningdataErrorReport();
    });

        function ListscreeningdataErrorReport() {
        var StartDate = $('#HStartDate').val();
        var EndDate = $('#HEndDate').val();
        var organization = $('#Organization').val();
        $.ajax({
            url: "@Url.Action("ListsSreeningDataErrorLogReport", "AdminReports")",
            data: { startDate: StartDate, endDate: EndDate, organization: organization, page: currentPage, pageSize: pageSize, totalRecords: totalRecords, download: download },
            type: 'POST',
            dataType: "json",
            success: function (data) {
                if (download) {
                    var filename = 'screeningerrorlog_' + new Date().toLocaleDateString() + '.csv';
                    downloadCSV(data.Records, filename);
                    download = false;
                }
                else {
                    totalRecords = data.TotalRecords;
                    totalPages = parseInt((totalRecords + pageSize - 1) / pageSize);
                    displayscreeningdataErrorReport(data.Records);
                    if (totalRecords <= 0) {
                        $('#screeningdata-error-report').html("<center>No data were found.</center>");
                    }
                    AddPager();
                    $('[show-if-submitting]').parent().prop('disabled', '');
                    $('[show-if-submitting]').addClass('hide');
                }
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
                RedirectToErrorPage(jqXHR.status);
            });
    }

    function displayscreeningdataErrorReport(errordata) {
        $('#screeningdata-error-report').html("");
        var errorhtml = "";
        errorhtml += "<thead><tr><th>Organization Name</th>";
        errorhtml += "<th>Unique Id</th>";
        errorhtml += "<th>Error</th>";
        errorhtml += "<th>Log Date</th></tr></thead>";
        for (i in errordata) {
            var error = errordata[i];
            errorhtml += "<tr><td>" + error.Organization + "</td>";
            errorhtml += "<td>" + error.UniqueId + "</td>";
            errorhtml += "<td>" + error.Error + "</td>";
            errorhtml += "<td>" + error.LogDate + "</td></tr>";
        }
        $('#screeningdata-error-report').append(errorhtml);
    }
    function GotoPage(page) {
        currentPage = page;
        startIndex = page * pageSize + 1;
        ListscreeningdataErrorReport();
    }
</script>
